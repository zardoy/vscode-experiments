diff --git a/build/cli/esbuild/esbuild.js b/build/cli/esbuild/esbuild.js
index 8e7b5e7eb3849f05438e2ded57d41587d64e2d68..910e90b142d59ee7b203899773d63d09f4528fcc 100644
--- a/build/cli/esbuild/esbuild.js
+++ b/build/cli/esbuild/esbuild.js
@@ -1,44 +1,47 @@
-"use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.runEsbuild = void 0;
-const fs_1 = __importDefault(require("fs"));
-const path_1 = require("path");
-const debug_1 = __importDefault(require("@prisma/debug"));
-const esbuild_1 = require("esbuild");
-const escape_string_regexp_1 = __importDefault(require("escape-string-regexp"));
-const filesize_1 = __importDefault(require("filesize"));
-const kleur_1 = __importDefault(require("kleur"));
-const lodash_1 = require("lodash");
-const config_1 = require("../../config");
-const util_1 = require("../../util");
-const logger_1 = require("../logger");
-const build_1 = require("../commands/build");
-const utils_1 = require("./utils");
-const debug = (0, debug_1.default)('vscode-framework:esbuild');
+'use strict'
+var __importDefault =
+    (this && this.__importDefault) ||
+    function (mod) {
+        return mod && mod.__esModule ? mod : { default: mod }
+    }
+Object.defineProperty(exports, '__esModule', { value: true })
+exports.runEsbuild = void 0
+const fs_1 = __importDefault(require('fs'))
+const path_1 = require('path')
+const debug_1 = __importDefault(require('@prisma/debug'))
+const esbuild_1 = require('esbuild')
+const escape_string_regexp_1 = __importDefault(require('escape-string-regexp'))
+const filesize_1 = __importDefault(require('filesize'))
+const kleur_1 = __importDefault(require('kleur'))
+const lodash_1 = require('lodash')
+const config_1 = require('../../config')
+const util_1 = require('../../util')
+const logger_1 = require('../logger')
+const build_1 = require('../commands/build')
+const utils_1 = require('./utils')
+const debug = (0, debug_1.default)('vscode-framework:esbuild')
 /** Always injected for framework functionality */
-const topLevelInjectedCode = `let __VSCODE_FRAMEWORK_CONTEXT;\n`;
-const runEsbuild = async ({ target, mode, outDir, afterSuccessfulBuild = () => { }, defineEnv, resolvedManifest, injectConsole, config, }) => {
-    var _a, _b, _c;
-    const esbuildConfig = (0, lodash_1.defaultsDeep)((_a = config.esbuild[mode]) !== null && _a !== void 0 ? _a : {}, (0, lodash_1.omit)(config.esbuild, ['development', 'production']));
-    const extensionEntryPoint = esbuildConfig.entryPoint;
-    const realEntryPoint = (0, path_1.join)(__dirname, '../../extensionBootstrap.ts');
-    debug('Esbuild starting...');
+const topLevelInjectedCode = `let __VSCODE_FRAMEWORK_CONTEXT;\n`
+const runEsbuild = async ({ target, mode, outDir, afterSuccessfulBuild = () => {}, defineEnv, resolvedManifest, injectConsole, config }) => {
+    var _a, _b, _c
+    const esbuildConfig = (0, lodash_1.defaultsDeep)(
+        (_a = config.esbuild[mode]) !== null && _a !== void 0 ? _a : {},
+        (0, lodash_1.omit)(config.esbuild, ['development', 'production']),
+    )
+    const extensionEntryPoint = esbuildConfig.entryPoint
+    const realEntryPoint = (0, path_1.join)(__dirname, '../../extensionBootstrap.ts')
+    debug('Esbuild starting...')
     debug('Entry points', {
         real: realEntryPoint,
         extension: extensionEntryPoint,
-    });
+    })
     debug({
         target,
         injectConsole,
         outDir,
         defineEnv,
-    });
-    const consoleInjectCode = injectConsole
-        ? await fs_1.default.promises.readFile((0, path_1.join)(__dirname, './consoleInject.js'), 'utf-8')
-        : undefined;
+    })
+    const consoleInjectCode = injectConsole ? await fs_1.default.promises.readFile((0, path_1.join)(__dirname, './consoleInject.js'), 'utf-8') : undefined
     // lodash-marker
     const { metafile, stop } = await (0, esbuild_1.build)({
         bundle: true,
@@ -72,54 +75,60 @@ const runEsbuild = async ({ target, mode, outDir, afterSuccessfulBuild = () => {
             {
                 name: 'build-watcher',
                 setup(build) {
-                    let rebuildCount = 0;
-                    let date;
-                    let prevHashOutput;
+                    let rebuildCount = 0
+                    let date
+                    let prevHashOutput
                     build.onStart(() => {
-                        date = Date.now();
-                        if (!debug.enabled)
-                            (0, logger_1.clearConsole)(true, false);
-                    });
+                        date = Date.now()
+                        if (!debug.enabled) (0, logger_1.clearConsole)(true, false)
+                    })
                     build.onEnd(async ({ errors, outputFiles }) => {
                         if (errors.length > 0) {
-                            console.log(kleur_1.default.bgRed().white(` BUILD ERRORS: ${errors.length} `));
-                            return;
+                            console.log(kleur_1.default.bgRed().white(` BUILD ERRORS: ${errors.length} `))
+                            return
                         }
-                        const [sourceMaps, jsFiles] = (0, lodash_1.partition)(outputFiles, ({ path }) => path.endsWith('.map'));
-                        const sourceMapsEnabled = sourceMaps.length > 0;
-                        for (const sourcemap of sourceMaps)
-                            await fs_1.default.promises.writeFile(sourcemap.path, sourcemap.contents);
-                        const outputFile = jsFiles[0];
-                        const newHashOutput = (0, util_1.getHashFromString)(outputFile.text);
+                        const [sourceMaps, jsFiles] = (0, lodash_1.partition)(outputFiles, ({ path }) => path.endsWith('.map'))
+                        const sourceMapsEnabled = sourceMaps.length > 0
+                        for (const sourcemap of sourceMaps) await fs_1.default.promises.writeFile(sourcemap.path, sourcemap.contents)
+                        const outputFile = jsFiles[0]
+                        const newHashOutput = (0, util_1.getHashFromString)(outputFile.text)
                         // 1. Sometimes esbuild does rebulid when you change file outside src/ (suppose it's a bug)
                         // 2. Esbulid emits rebuild when you save file, but output size remains the same e.g. you if you format the file
                         // size isn't changed = code isn't changed so we don't need to emit reload
                         if (newHashOutput === prevHashOutput) {
                             // to reformat message
-                            (0, logger_1.logConsole)('log', 'No new changes');
-                            return;
+                            ;(0, logger_1.logConsole)('log', 'No new changes')
+                            return
                         }
-                        prevHashOutput = newHashOutput;
+                        prevHashOutput = newHashOutput
                         // investigate performance
-                        let codeToInject = `${topLevelInjectedCode}${consoleInjectCode !== null && consoleInjectCode !== void 0 ? consoleInjectCode : ''}\n`;
-                        if (sourceMapsEnabled)
-                            codeToInject = codeToInject.replace(/\n/g, '');
-                        debug('Start writing with inject');
-                        await fs_1.default.promises.writeFile(outputFile.path, 
-                        // using this workaround as we can't use shim in esbuild: https://github.com/evanw/esbuild/issues/1557
-                        `${codeToInject}${outputFile.text}`, 'utf-8');
-                        debug('End writing with inject');
-                        const reloadType = (0, config_1.getBootstrapFeature)(config, ({ autoReload }) => autoReload && autoReload.type);
-                        (0, logger_1.logConsole)('log', kleur_1.default.green(rebuildCount === 0
-                            ? 'build'
-                            : reloadType === 'forced'
-                                ? 'reload'
-                                : // : reloadType === 'hot'
-                                    // ? 'hot-reload'
-                                    'rebuild'), kleur_1.default.gray(`${Date.now() - date}ms`));
-                        debug('afterSuccessfulBuild called');
-                        await afterSuccessfulBuild(rebuildCount++);
-                    });
+                        let codeToInject = `${topLevelInjectedCode}${consoleInjectCode !== null && consoleInjectCode !== void 0 ? consoleInjectCode : ''}\n`
+                        if (sourceMapsEnabled) codeToInject = codeToInject.replace(/\n/g, '')
+                        debug('Start writing with inject')
+                        await fs_1.default.promises.writeFile(
+                            outputFile.path,
+                            // using this workaround as we can't use shim in esbuild: https://github.com/evanw/esbuild/issues/1557
+                            `${codeToInject}${outputFile.text}`,
+                            'utf-8',
+                        )
+                        debug('End writing with inject')
+                        const reloadType = (0, config_1.getBootstrapFeature)(config, ({ autoReload }) => autoReload && autoReload.type)
+                        ;(0, logger_1.logConsole)(
+                            'log',
+                            kleur_1.default.green(
+                                rebuildCount === 0
+                                    ? 'build'
+                                    : reloadType === 'forced'
+                                    ? 'reload'
+                                    : // : reloadType === 'hot'
+                                      // ? 'hot-reload'
+                                      'rebuild',
+                            ),
+                            kleur_1.default.gray(`${Date.now() - date}ms`),
+                        )
+                        debug('afterSuccessfulBuild called')
+                        await afterSuccessfulBuild(rebuildCount++)
+                    })
                 },
             },
             {
@@ -128,13 +137,10 @@ const runEsbuild = async ({ target, mode, outDir, afterSuccessfulBuild = () => {
                 setup(build) {
                     // not used for now, config option will be available
                     const aliasModule = (aliasName, target) => {
-                        const filter = aliasModule instanceof RegExp
-                            ? aliasModule
-                            : new RegExp(`^${(0, escape_string_regexp_1.default)(aliasName)}(\\/.*)?$`);
-                        const namespace = 'esbuild-import-alias';
+                        const filter = aliasModule instanceof RegExp ? aliasModule : new RegExp(`^${(0, escape_string_regexp_1.default)(aliasName)}(\\/.*)?$`)
+                        const namespace = 'esbuild-import-alias'
                         build.onResolve({ filter }, async ({ resolveDir, path }) => {
-                            if (resolveDir === '')
-                                return;
+                            if (resolveDir === '') return
                             return {
                                 path,
                                 namespace,
@@ -142,48 +148,48 @@ const runEsbuild = async ({ target, mode, outDir, afterSuccessfulBuild = () => {
                                     aliasName,
                                     resolveDir,
                                 },
-                            };
-                        });
+                            }
+                        })
                         build.onLoad({ filter: /.*/, namespace }, async ({ path, pluginData: pluginDataUntyped }) => {
-                            const { aliasName, resolveDir } = pluginDataUntyped;
+                            const { aliasName, resolveDir } = pluginDataUntyped
                             const contents = [
                                 `export * from '${path.replace(aliasName, target)}'`,
                                 `export { default } from '${path.replace(aliasName, target)}';`,
-                            ].join('\n');
-                            return { contents, resolveDir };
-                        });
-                    };
+                            ].join('\n')
+                            return { contents, resolveDir }
+                        })
+                    }
                 },
             },
             {
                 name: 'esbuild-node-alias',
                 setup(build) {
-                    const namespace = 'esbuild-node-alias';
-                    const filter = /^node:(.*)/;
+                    const namespace = 'esbuild-node-alias'
+                    const filter = /^node:(.*)/
                     build.onResolve({ filter }, async ({ path, resolveDir }) => ({
                         path,
                         namespace,
                         pluginData: {
                             resolveDir,
                         },
-                    }));
+                    }))
                     build.onLoad({ filter: /.*/, namespace }, async ({ path, pluginData: { resolveDir } }) => {
-                        const target = path.replace(filter, '$1');
-                        const contents = [`export * from '${target}'`, `export { default } from '${target}';`].join('\n');
-                        return { resolveDir, contents };
-                    });
+                        const target = path.replace(filter, '$1')
+                        const contents = [`export * from '${target}'`, `export { default } from '${target}';`].join('\n')
+                        return { resolveDir, contents }
+                    })
                 },
             },
+            ...((_c = esbuildConfig.plugins) !== null && _c !== void 0 ? _c : []),
         ],
-        ...((_c = esbuildConfig.plugins) !== null && _c !== void 0 ? _c : []),
-    });
+    })
     // TODO output packed file and this file sizes at prod
     if (mode === 'production' && metafile) {
-        const outputSize = Object.entries(metafile.outputs)[0][1].bytes;
-        console.log(await (0, esbuild_1.analyzeMetafile)(metafile));
+        const outputSize = Object.entries(metafile.outputs)[0][1].bytes
+        console.log(await (0, esbuild_1.analyzeMetafile)(metafile))
         // TODO output real size
-        console.log('Production build size:', kleur_1.default.bold().cyan((0, filesize_1.default)(outputSize)));
+        console.log('Production build size:', kleur_1.default.bold().cyan((0, filesize_1.default)(outputSize)))
     }
-    return { stop };
-};
-exports.runEsbuild = runEsbuild;
+    return { stop }
+}
+exports.runEsbuild = runEsbuild